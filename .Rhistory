length(myVector)
# This is also a clever way to select the last element of a vector if
# you don't know how long it's going to be before hand.
myVector[length(myVector)]
# if you want to know how long a vector is you can use the `length` fucntion
length(myVector)
# This is also a clever way to select the last element of a vector if
# you don't know how long it's going to be before hand.
myVector[length(myVector)]
for (i in 1:5){
print(i)
}
for (elem in myVector){
print(elem)
}
# We can do whatever we want to the data in the loop.
# Let's use our function we made earlier.
for (elem in myVector){
print(myFunction(elem))
}
# We can do whatever we want to the data in the loop.
# Let's use our function we made earlier.
for (elem in myVector){
print(myFunction(elem, 2))
}
myFUnction(myVector)
# Indexing using logic
# Sometimes we might want to select elements based on conditions
# To do this we can use logical statements for indexing
# Data structures like list or vectors can take logical values of the same
# length to index like so
myVector[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
# The trick is we can procude a logical vector like this by making
# conditional statements. For example:
myVector > 5
# now we can insert these logical values back into out vector as the index to
# return all values that are greater than 5!
myVector[myVector > 5]
# Let's look at another function `mean()`
# This function takes the mean of a series of values so takes
# a vector or list as an argument (we will introduce lists
# and vectors shortly)
myVector <- c(100, 200, 150, 150, 400)
mean(myVector)
# or using a range (which is actually another vector) or other vectors
1:3
myVector[1:3] # this selects positions 1 to 3
myVector[c(1,2,4)] # this selects positions 1, 2 and 4
myVector[c(5,2,4)] # this selects positions 5, 2 and 4
# if you want to know how long a vector is you can use the `length` fucntion
length(myVector)
# This is also a clever way to select the last element of a vector if
# you don't know how long it's going to be before hand.
myVector[length(myVector)]
setwd("~/Development/RUsers/workshops/Lachlan_Begin/BeginnerR")
df <- read.csv('data/GlobalTemperatures.csv')
df
head(df)
View(df)
df$dt <- as.POSIXct(df$dt)
plot(df$dt, df$LandAverageTemperature)
plot(df$dt, df$LandAverageTemperature, type='l')
df <- read.csv('data/monthlyTemp.csv')
# First thing we need to do is read in our dataset. Out data set is
# in a format called "comma separated values" or "csv". In R with
# have a function called `read.csv()` for reading csv files. Let's
# read in the data.
df <- read.csv('data/monthlyTemp.csv')
head(df)
?head
# To have a quick loomk at the data we can use the `head()` function
# to print the first few rows.
head(df)
# First thing we need to do is read in our dataset. Out data set is
# in a format called "comma separated values" or "csv". In R with
# have a function called `read.csv()` for reading csv files. Let's
# read in the data. We're saving the data as a variable "df" which is
# shorthand for "data frame"
df <- read.csv('data/monthlyTemp.csv')
# To have a quick loomk at the data we can use the `head()` function
# to print the first few rows.
head(df)
# And we can use the `summary()` function to get and overview of the
# data set.
summary(df)
# So we have three columns in our dataset, "Source" (the source of the
# dataset), "Date" and "Mean" (the mean temperature). When workign with
# data frames you can select and individual column using the "$" operator.
df$Mean
# So we have three columns in our dataset, "Source" (the source of the
# dataset), "Date" and "Mean" (the mean temperature). When workign with
# data frames you can select and individual column using the "$" operator.
# This will print that column as a vector!
df$Mean
# So we have three columns in our dataset, "Source" (the source of the
# dataset), "Date" and "Mean" (the mean temperature). When workign with
# data frames you can select and individual column using the "$" operator.
# This will print that column as a vector!
head(df$Mean)
# So we have three columns in our dataset, "Source" (the source of the
# dataset), "Date" and "Mean" (the mean temperature). When workign with
# data frames you can select and individual column using the "$" operator.
# This will print that column as a vector!
head(df$Source)
head(df$Date)
head(df$Mean)
df$dt <- as.POSIXct(df$dt)
df$Date <- as.POSIXct(df$Date)
plot(as.POSIXct(df$Date), df$Mean, type='l')
plot(as.POSIXct(df$Date), df$Mean, type='l', col=df$Source)
plot(as.POSIXct(df$Date), df$Mean, type='l', col=df$Source)
plot(as.POSIXct(df$Date), df$Mean, col=df$Source)
plot(as.POSIXct(df$Date), df$Mean, col=df$Source, type='l')
plot(as.POSIXct(df$Date), df$Mean, col=df$Source)
# In this example we will be doing a basic analysis of a dataset of global
# temperature. We have two data sources for this dataset being "GCAG" and
# "GISTEMP" so effectively we have two datasets in the one dataset.
# First up let's set out working directopry again. You can copy this accross from
# the first script. This will be set from the last script but it's good practice
# to set this early on.
setwd("~/Development/RUsers/workshops/Lachlan_Begin/BeginnerR")
# Now the next thing we need to do is read in our dataset. Out data set is
# in a format called "comma separated values" or "csv". In R with
# have a function called `read.csv()` for reading csv files. Let's
# read in the data. We're saving the data as a variable "df" which is
# shorthand for "data frame"
df <- read.csv('data/monthlyTemp.csv')
# To have a quick loomk at the data we can use the `head()` function
# to print the first few rows.
head(df)
# And we can use the `summary()` function to get and overview of the
# data set.
summary(df)
# So we have three columns in our dataset, "Source" (the source of the
# dataset), "Date" and "Mean" (the mean temperature). When workign with
# data frames you can select and individual column using the "$" operator.
# This will print that column as a vector!
head(df$Source)
head(df$Date)
head(df$Mean)
plot(df$Date, df$Mean, col=df$Source)
data(InsectSprays)
df <- data(InsectSprays)
df
# In this tutorial we will be using some R packages. Packages are basically just
# collections of useful function to perform specific tasks that extend the
# functionality of the base R packages. You can load a package (once you have it
# installed) using the `library()` function.
library(datasets) # some built in datasets to play with
library(ggplot2) # useful
# Now let's load our first dataset
df <- data(InsectSprays)
df
# In this example we will be doing a basic analysis of a dataset of global
# temperature. We have two data sources for this dataset being "GCAG" and
# "GISTEMP" so effectively we have two datasets in the one dataset.
# In this tutorial we will be using some R packages. Packages are basically just
# collections of useful function to perform specific tasks that extend the
# functionality of the base R packages. You can load a package (once you have it
# installed) using the `library()` function. It's good practice to load all packages
# you will use at the top of your script.
library(datasets) # some built in datasets to play with
library(ggplot2) # useful
# First up let's set out working directopry again. You can copy this accross from
# the first script. This will be set from the last script but it's good practice
# to set this early on.
setwd("~/Development/RUsers/workshops/Lachlan_Begin/BeginnerR")
# Now let's load our first dataset
df <- data(InsectSprays)
?datasets
InsectSprays
library(datasets) # some built in datasets to play with
library(ggplot2) # useful
# First up let's set out working directopry again. You can copy this accross from
# the first script. This will be set from the last script but it's good practice
# to set this early on.
setwd("~/Development/RUsers/workshops/Lachlan_Begin/BeginnerR")
library(datasets) # some built in datasets to play with
library(ggplot2) # useful
# Now let's load our first dataset that's been loaded with the `datasets` package
df <- InsectSprays
library(datasets) # some built in datasets to play with
library(ggplot2) # useful for making nice looking plots and figures
# First up let's set out working directopry again. You can copy this accross from
# the first script. This will be set from the last script but it's good practice
# to set this early on.
setwd("~/Development/RUsers/workshops/Lachlan_Begin/BeginnerR")
# Data frames
# Now let's load our first dataset that's been loaded with the `datasets` package
# We're saving the data as a variable "df" which is shorthand for "data frame"
# Data frames are essentially "tables". You can think of each column as a
# vector that's been binded together to make a "data frame"
df <- InsectSprays
df
plot(df)
plot(df$spray, df$count)
boxplot(df$spray, df$count)
plot(df$spray, df$count)
plot(df$spray, df$count, col=df$spray)
plot(df$spray, df$count)
barplot(df$spray, df$count)
hist(df$spray, df$count)
# Let's have a quick look at the data
# We can use `head()` to see the first few rows to get an idea of how it is
# structured
head(df)
# We can use `summary()` to have a look at some basic
summary(df)
# We can use `summary()` to have a look at some basic metrics such as the
# minimum, maximum, median and the mean.
summary(df)
12*6
# Now we can learn about the `$` operator. Within a some data structures
# we can select different components using the `$` symbol. For example,
# we can select the two columns using this operator.
df$count
df$spray
# when you select a column you can index it like you would a vector
df$count[2]
df$count[2]
df$spray[2]
# We can also index data frames by sepcifying both the rows and columns
df[1, 2]
# We can also index data frames by sepcifying both the rows and columns
df[2, 1] # this will select row 2 in column 1 (count)
# also like before we can also use conditional statements to index our
# data frames which can be incredibly useful. Just say we wanted only to
# select the data from spray 'D'. We could make a conditional statement like this.
df$spay == 'D'
# also like before we can also use conditional statements to index our
# data frames which can be incredibly useful. Just say we wanted only to
# select the data from spray 'D'. We could make a conditional statement like this.
df$spray == 'D'
# this can then be passed to slect only the rows of the data frame where
# the spray is 'D'
df[df$spray == 'D', ]
# notice the comma followed by nothing? That simply means we are slecting ALL
# the columns. If we wanted just the count data where spray = 'D' then we could
# pass either the column name as a string or the column index.
df[df$spray == 'D', 'count']
df[df$spray == 'D', 1]
df[10:20, 2] # this will select rows 10 to 20 for column 2 (spray)
# also like before we can also use conditional statements to index our
# data frames which can be incredibly useful. Just say we wanted only to
# select the data from spray 'D'. We could make a conditional statement like this.
df$spray == 'D'
# this can then be passed to slect only the rows of the data frame where
# the spray is 'D'
df[df$spray == 'D', ]
# notice the comma followed by nothing? That simply means we are slecting ALL
# the columns. If we wanted just the count data where spray = 'D' then we could
# pass either the column name as a string or the column index.
df[df$spray == 'D', 'count']
df[df$spray == 'D', 1]
# notice that none of this changes the data and df is still the same. R does
# not save data to a variable unless we explicity tell it to. For example we
# can save the data frame with only spray 'D' like this.
df_spray_D <- df[df$spray == 'D', ]
df_spray_D
df$spray == 'D'
!df$spray == 'D'
# So we can also select all the rows that are the inverse of our conditon.
# In this case all rows that are not 'D'
df[!df$spray == 'D', ]
df[df$spray != 'D', ]
# Well enough messing about let's actually analyse this data.
# Let's make a visual plot of our data.
# Are has a lot of "base" plotting functions that are quite good.
# It's also usually smart enough to know what you want to plot based
# on the layout of the data. Becuase our x axis is factors and y axis
# is numerical in this case R knows that a box plot is the best way to
# represent this data.
plot(df$spray, df$count)
# Well enough messing about let's actually analyse this data.
# Let's make a visual plot of our data.
# Are has a lot of "base" plotting functions that are quite good.
# It's also usually smart enough to know what you want to plot based
# on the layout of the data. Becuase our x axis is factors and y axis
# is numerical in this case R knows that a box plot is the best way to
# represent this data.
plot(df$spray, df$count)
library(datasets) # some built in datasets to play with
library(ggplot2) # useful for making nice looking plots and figures
# First up let's set out working directopry again. You can copy this accross from
# the first script. This will be set from the last script but it's good practice
# to set this early on.
setwd("~/Development/RUsers/workshops/Lachlan_Begin/BeginnerR")
# Data frames
# Now let's load our first dataset that's been loaded with the `datasets` package
# We're saving the data as a variable "df" which is shorthand for "data frame"
# Data frames are essentially "tables". You can think of each column as a
# vector that's been binded together to make a "data frame"
df <- InsectSprays
# Let's have a quick look at the data
# We can use `head()` to see the first few rows to get an idea of how it is
# structured
head(df)
# We can use `summary()` to have a look at some basic metrics such as the
# minimum, maximum, median and the mean.
summary(df)
# Now we can learn about the `$` operator. Within a some data structures
# we can select different components using the `$` symbol. For example,
# we can select the two columns using this operator.
df$count
df$spray
# Let's have a quick look at the data
# We can use `head()` to see the first few rows to get an idea of how it is
# structured
head(df)
# when you select a column you can index it like you would a vector
df$count[2]
df$spray[2]
# We can also index data frames by sepcifying both the rows and columns
df[2, 1] # this will select row 2 in column 1 (count)
df[10:20, 2] # this will select rows 10 to 20 for column 2 (spray)
# also like before we can also use conditional statements to index our
# data frames which can be incredibly useful. Just say we wanted only to
# select the data from spray 'D'. We could make a conditional statement like this.
df$spray == 'D'
# this can then be passed to slect only the rows of the data frame where
# the spray is 'D'
df[df$spray == 'D', ]
# notice the comma followed by nothing? That simply means we are slecting ALL
# the columns. If we wanted just the count data where spray = 'D' then we could
# pass either the column name as a string or the column index.
df[df$spray == 'D', 'count']
df[df$spray == 'D', 1]
# notice that none of this changes the data and df is still the same. R does
# not save data to a variable unless we explicity tell it to. For example we
# can save the data frame with only spray 'D' like this.
df_spray_D <- df[df$spray == 'D', ]
df_spray_D
# There's also one more useful trick we can use. You can invert a logic array
# using the `!` symbol.
!df$spray == 'D'
# So we can also select all the rows that are the inverse of our conditon.
# In this case all rows that are not 'D'
df[!df$spray == 'D', ]
# we could also use the `!=` (not equal) operator to do this but this just
# shows there's more than one way to achieve the same results in R.
df[df$spray != 'D', ]
# Well enough messing about let's actually analyse this data.
# Let's make a visual plot of our data.
# Are has a lot of "base" plotting functions that are quite good.
# It's also usually smart enough to know what you want to plot based
# on the layout of the data. Becuase our x axis is factors and y axis
# is numerical in this case R knows that a box plot is the best way to
# represent this data.
plot(df$spray, df$count)
# Well it's pretty clear that C, D and E are lowering the insects count
# but let's confirm this statistically
anova
# Well it's pretty clear that C, D and E are lowering the insects count
# but let's confirm this statistically
anova(count ~ spray, data = df)
# Well it's pretty clear that C, D and E are lowering the insects count
# but let's confirm this statistically
anova(count ~ spray, data = df)
# Well it's pretty clear that C, D and E are lowering the insects count
# but let's confirm this statistically
anova(df, count ~ spray)
?anova
# Well it's pretty clear that C, D and E are lowering the insects count
# but let's confirm this statistically
aov(count ~ spray, data = df)
# Well it's pretty clear that C, D and E are lowering the insects count
# but let's confirm this statistically
aov(count ~ spray, data = df)
# Well it's pretty clear that C, D and E are lowering the insects count
# but let's confirm this statistically
aov.spray <- aov(count ~ spray, data = df)
aov.spray
summary(aov.spray)
summary(aov.spray)
# Well enough messing about let's actually analyse this data.
# Let's make a visual plot of our data.
# Are has a lot of "base" plotting functions that are quite good.
# It's also usually smart enough to know what you want to plot based
# on the layout of the data. Becuase our x axis is factors and y axis
# is numerical in this case R knows that a box plot is the best way to
# represent this data.
plot(df$spray, df$count)
# Well it's pretty clear that C, D and E are lowering the insects count
# but let's confirm this statistically.
# we can do an Analysis of Variance (ANOVA) very easily in R
aov.spray <- aov(count ~ spray, data = df)
summary(aov.spray)
# Now the next thing we need to do is read in our dataset. Out data set is
# in a format called "comma separated values" or "csv". In R with
# have a function called `read.csv()` for reading csv files. Let's
# read in the data. We're saving the data as a variable "df" which is
# shorthand for "data frame"
df <- read.csv('data/monthlyTemp.csv')
# To have a quick loomk at the data we can use the `head()` function
# to print the first few rows.
head(df)
# To have a quick loomk at the data we can use the `head()` function
# to print the first few rows.
head(df)
# And we can use the `summary()` function to get and overview of the
# data set.
summary(df)
#
df$Date <- as.POSIXct(df$Date)
plot(df$Date, df$Mean, col=df$Source)
o
temp.plot <- ggplot(data = df, aes(Date, Mean, color=Source)) +
geom_line()
temp.plot
temp.plot <- ggplot(data = df, aes(Date, Mean, color=Source)) +
geom_line(alpha=0.7)
temp.plot
temp.plot <- ggplot(data = df, aes(Date, Mean, color=Source)) +
geom_point() +
geom_smooth(method='loess')
temp.plot
ggplot(data = df, aes(Date, Mean, color=Source)) +
geom_point(alpha=0.5) +
geom_smooth(method='loess')
ggplot(data = df, aes(Date, Mean, color=Source)) +
geom_point(alpha=0.3) +
geom_smooth(method='loess')
ggplot(data = df, aes(Date, Mean, color=Source)) +
geom_point(alpha=0.3) +
geom_smooth(method='lm')
ggplot(data = df, aes(Date, Mean, color=Source)) +
geom_point(alpha=0.3) +
geom_smooth(method='loess')
cmocean
?cmocean
library(gganimate) # useful for making animations
library(cmocean) # some nice looking colormaps (you'll see)
cmocean
cmocean$thermal
?cmocean
cmocean(thermal)
cmocean('thermal')
cmocean('thermal')(100)
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=cmocean('thermal')(100))) +
geom_point(cmap)
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=cmocean('thermal')(100))) +
geom_point()
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_point()
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_point() +
+ scale_color_manual(values=cmocean('thermal')(100))
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_point() +
+ scale_color_manual(values=cmocean('thermal')(100))
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_point() +
scale_color_manual(values=cmocean('thermal')(100))
?scale_color_discrete
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_point() +
scale_color_discrete(values=cmocean('thermal')(100))
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_point() +
scale_color_discrete(cmocean('thermal')(100))
terrain.colors(10)
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_point() +
scale_colour_gradientn(colours = cmocean('thermal')(10))
ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_line() +
scale_colour_gradientn(colours = cmocean('thermal')(10))
plot.temp.trend <- ggplot(data = df, aes(Date, Mean, color=Source)) +
geom_point(alpha=0.3) +
geom_smooth(method='loess')
plot.temp.trend
plot.temp.thermal <- ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_line() +
scale_colour_gradientn(colours = cmocean('thermal')(10))
# have a look
plot.temp.thermal
plot.temp.thermal + transition_reveal(Date)
?transition_reveal
plot.temp.thermal <- ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_line() +
scale_colour_gradientn(colours = cmocean('thermal')(10))
# have a look
plot.temp.thermal
plot.temp.thermal <- ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_line() +
geom_smooth(method='loess', color='grey')
scale_colour_gradientn(colours = cmocean('thermal')(10))
plot.temp.thermal <- ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_line() +
geom_smooth(method='loess', color='grey') +
scale_colour_gradientn(colours = cmocean('thermal')(10))
# have a look
plot.temp.thermal
plot.temp.thermal + transition_reveal(Date)
plot.temp.thermal <- ggplot(data = df[df$Source == 'GCAG',], aes(Date, Mean, color=Mean)) +
geom_line() +
scale_colour_gradientn(colours = cmocean('thermal')(10))
# have a look
plot.temp.thermal
log2(478/466.16)
log2(478/466.16)*1200
freq2cents <- function(F1, F2){
return(log2(F2, F1)*1200)
}
freq2cents(466.16, 478)
freq2cents <- function(F1, F2){
return(log2(F2/F1)*1200)
}
freq2cents(466.16, 478)
freq2cents(466.16, 476)
freq2cents(466.16, 480)
freq2cents(478, 466.16)
